name: Flutter Build and Deploy

on:
  push:
    branches:
      - master  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        continue-on-error: false
        if: success()

      # Step 2: Set up Java (required for Flutter)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
        continue-on-error: false
        if: success()

      # Step 3: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'  # Specify your Flutter version
          channel: stable
        continue-on-error: false
        if: success()

      # Step 4: Verify Flutter setup
      - name: Verify Flutter setup
        run: |
          flutter doctor || { echo "Flutter setup failed"; exit 1; }
        shell: bash
        continue-on-error: false
        if: success()

      # Step 5: Create env.json file using baseurl from secrets
      - name: Generate env.json
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
        run: |
          if [ -z "$BASE_URL" ]; then
            echo "Error: BASE_URL secret is not set"
            exit 1
          fi
          mkdir -p assets
          echo "{\"BASE_URL\": \"$BASE_URL\"}" > assets/env.json
          if [ ! -f assets/env.json ]; then
            echo "Error: Failed to create env.json"
            exit 1
          fi
        shell: bash
        continue-on-error: false
        if: success()

      # Step 6: Build Flutter APK
      - name: Build Flutter APK
        run: |
          flutter clean || { echo "Flutter clean failed"; exit 1; }
          flutter pub get || { echo "Flutter pub get failed"; exit 1; }
          flutter build apk --release || { echo "Flutter build failed"; exit 1; }
          if [ ! -f build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "Error: APK not found"
            exit 1
          fi
        shell: bash
        continue-on-error: false
        if: success()

      # Step 7: Send APK via email
      - name: Send APK to emails
        env:
          SMTP_HOST: smtp.gmail.com
          SMTP_PORT: 587
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          RECIPIENT_EMAILS: ebinehitasylvester@gmail.com,devopsforjesus@gmail.com  # Add your email addresses here
        run: |
          if [ -z "$RECIPIENT_EMAILS" ]; then
            echo "Error: No recipient emails specified"
            exit 1
          fi
          python -m smtpd -n -c DebuggingServer localhost:25 &
          SMTPD_PID=$!
          python3 -c "
          import smtplib
          from email.mime.multipart import MIMEMultipart
          from email.mime.base import MIMEBase
          from email import encoders
          import os

          msg = MIMEMultipart()
          msg['From'] = '$SMTP_USER'
          msg['To'] = '$RECIPIENT_EMAILS'
          msg['Subject'] = 'Flutter APK Build'

          with open('build/app/outputs/flutter-apk/app-release.apk', 'rb') as f:
              part = MIMEBase('application', 'octet-stream')
              part.set_payload(f.read())
          encoders.encode_base64(part)
          part.add_header('Content-Disposition', 'attachment; filename=app-release.apk')
          msg.attach(part)

          try:
              server = smtplib.SMTP('$SMTP_HOST', $SMTP_PORT)
              server.starttls()
              server.login('$SMTP_USER', '$SMTP_PASS')
              server.send_message(msg)
              server.quit()
              print('Email sent successfully')
          except Exception as e:
              print(f'Error sending email: {str(e)}')
              exit(1)
          "
          kill $SMTPD_PID
        shell: bash
        continue-on-error: false
        if: success()